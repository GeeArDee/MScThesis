#%%
# -*- coding: utf-8 -*-
"""
Created on Wed May  3 10:12:32 2023

@author: gdub5
"""
import numpy as np
import sympy as sp


def CEA_LSP_polynomials(compound, T):
    t = sp.symbols('t')

    # Compound: H, H2, Hp, e, Ar, Arp
    # T: Temperature in Kelvin

    # The values of the coefficients (a_1, a_2, etc.) are given below.  Their
    # values apply only over the temperature range specified.

    # Note:  R is the universal gas constant 8314.462 J/kmol-K

    # From:  McBride, B.J., Zehe, M.J., and Gordon, S., “NASA Glenn
    # Coefficients for Calculating Thermodynamic Properties of Individual
    # Species,” NASA TP 2002-211556, Glenn Research Center, Cleveland, Ohio.

    if compound == 'H':

        # ATOMIC HYDROGEN: H, p.134 in NASA coeffs

        h_f = 217998.828

        if T < 1000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5
            a_4 = 0.
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = 2.547370801*10 ** 4
            b_2 = -4.466828530*10 ** -1

        elif 1000 <= T < 6000:

            a_1 = 6.07877425*10 ** 1
            a_2 = -1.819354417*10 ** -1
            a_3 = 2.500211817
            a_4 = -1.226512864*10 ** -7
            a_5 = 3.732876330*10 ** -11
            a_6 = -5.687744560*10 ** -15
            a_7 = 3.410210197*10 ** -19
            b_1 = 2.547486398*10 ** 4
            b_2 = -4.481917770*10 ** -1

        elif T >= 6000:

            a_1 = 2.173757694*10 ** 8
            a_2 = -1.312035403*10 ** 5
            a_3 = 3.399174200*10 ** 1
            a_4 = -3.813999680*10 ** -3
            a_5 = 2.432854837*10 ** -7
            a_6 = -7.694275540*10 ** -12
            a_7 = 9.644105630*10 ** -17
            b_1 = 1.067638086*10 ** 6
            b_2 = -2.742301051*10 ** 2

    elif compound == 'H2':

        # MOLECULAR HYDROGEN: H2

        h_f = 0.

        if T < 1000:  # changed these from Higgins .txt, page 138 in NASA Coeff

            a_1 = 4.078323210*10 ** 4
            a_2 = -8.009186040*10 ** 2
            a_3 = 8.214702010
            a_4 = -1.269714457*10 ** -2
            a_5 = 1.753605076*10 ** -5
            a_6 = -1.202860270*10 ** -8
            a_7 = 3.368093490*10 ** -12
            b_1 = 2.682484665*10 ** 3
            b_2 = -3.043788844*10 ** 1

        elif 1000 <= T < 6000:

            a_1 = 5.608128010*10 ** 5
            a_2 = -8.371504740*10 ** 2
            a_3 = 2.975364532
            a_4 = 1.252249124*10 ** -3
            a_5 = -3.740716190*10 ** -7
            a_6 = 5.936625200*10 ** -11
            a_7 = -3.606994100*10 ** -15
            b_1 = 5.339824410*10 ** 3
            b_2 = -2.202774769

        elif T >= 6000:

            a_1 = 4.966884120*10 ** 8
            a_2 = -3.147547149*10 ** 5
            a_3 = 7.984121880*10 ** 1
            a_4 = -8.414789210*10 ** -3
            a_5 = 4.753248350*10 ** -7
            a_6 = -1.371873492*10 ** -11
            a_7 = 1.605461756*10 ** -16
            b_1 = 2.488433516*10 ** 6
            b_2 = -6.695728110*10 ** 2

    elif compound == 'Hp':

        # IONIZED HYDROGEN (PROTON): Hp

        h_f = 1536245.928

        if T < 1000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5  # changed
            a_4 = 0.  # changed this from .txt
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = 1.840214877*10 ** 5
            b_2 = -1.140646644*10 ** 0

        elif 1000 <= T < 6000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5
            a_4 = 0.
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = 1.840214877*10 ** 5
            b_2 = -1.140646644*10 ** 0.

        elif T >= 6000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5
            a_4 = 0.
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = 1.840214877*10 ** 5
            b_2 = -1.140646644*10 ** 0

    elif compound == 'e':

        # ELECTRONS: e

        h_f = 0.

        if T < 1000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5  # mistake here
            a_4 = 0.  # mistake here
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = -7.453750000*10 ** 2
            b_2 = -1.172081224*10 ** 1

        elif 1000 <= T < 6000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5
            a_4 = 0.
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = -7.453750000*10 ** 2
            b_2 = -1.172081224*10 ** 1

        elif T >= 6000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5
            a_4 = 0.
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = -7.453750000*10 ** 2
            b_2 = -1.172081224*10 ** 1

    elif compound == 'Ar':

        # ARGON: Ar, p. 63 NASA Coeffs
        h_f = 0.000

        if T < 1000:

            a_1 = 0.
            a_2 = 0.
            a_3 = 2.5
            a_4 = 0.
            a_5 = 0.
            a_6 = 0.
            a_7 = 0.
            b_1 = -7.453750000*10 ** 2
            b_2 = 4.379674910*10 ** 0

        elif 1000 <= T < 6000:

            a_1 = 2.010538475*10 ** 1
            a_2 = -5.992661070*10 ** -2
            a_3 = 2.500069401*10 ** 0
            a_4 = -3.992141160*10 ** -8  # mistake corrected
            a_5 = 1.205272140*10 ** -11
            a_6 = -1.819015576*10 ** -15
            a_7 = 1.078576636*10 ** -19
            b_1 = -7.449939610*10 ** 2
            b_2 = 4.379180110*10 ** 0

        elif T >= 6000:

            a_1 = -9.951265080*10 ** 8
            a_2 = 6.458887260*10 ** 5
            a_3 = -1.675894697*10 ** 2
            a_4 = 2.319933363*10 ** -2  # mistake corrected
            a_5 = -1.721080911*10 ** -6  # mistake corrected
            a_6 = 6.531938460*10 ** -11
            a_7 = -9.740147729*10 ** -16
            b_1 = -5.078300340*10 ** 6
            b_2 = 1.465298484*10 ** 3

    elif compound == 'Arp':

        # IONIZED ARGON (proton): Ar+
        h_f = 1526778.407

        if T < 1000:

            a_1 = -5.731209170*10 ** 4
            a_2 = 7.930791470*10 ** 2
            a_3 = -1.717121217*10 ** 0
            a_4 = 1.044184018*10 ** -2
            a_5 = -1.180207501*10 ** -5
            a_6 = 6.528134780*10 ** -9
            a_7 = -1.447558130*10 ** -12
            b_1 = 1.790572230*10 ** 5
            b_2 = 2.949150950*10 ** 1

        elif 1000 <= T < 6000:

            a_1 = -3.835965400*10 ** 5
            a_2 = 8.162019700*10 ** 2
            a_3 = 2.301342628*10 ** 0
            a_4 = -4.952983770*10 ** -6
            a_5 = 1.205108477*10 ** -8
            a_6 = -2.185050286*10 ** -12
            a_7 = 1.265493898*10 ** -16
            b_1 = 1.771811455*10 ** 5
            b_2 = 7.947507480*10 ** 0

        elif T >= 6000:

            a_1 = 1.006884827*10 ** 7
            a_2 = -6.624361280*10 ** 3
            a_3 = 4.446908200*10 ** 0
            a_4 = -3.017567664*10 ** -4
            a_5 = 2.612882069*10 ** -8
            a_6 = -1.201637769*10 ** -12
            a_7 = 2.299206903*10 ** -17
            b_1 = 2.349504137*10 ** 5
            b_2 = -1.032262257*10 ** 1

    # Curve Fits to Thermodynamic Data

    cp_divR = a_1*T**(-2) + a_2*T**(-1) + a_3 + a_4 * \
        T + a_5*T**2 + a_6*T**3 + a_7*T**4

    h_divRT = -a_1*T**(-2) + a_2*np.log(T)*T**(-1) + a_3 + a_4*T / \
        2 + a_5*(T**2)/3 + a_6*(T**3)/4 + a_7*(T**4)/5 + b_1/T

    so_divR = -a_1*T**(-2)/2 - a_2*T**(-1) + a_3*np.log(T) + a_4 * \
        T + a_5*(T**2)/2 + a_6*T**3/3 + a_7*T**4/4 + b_2

    h_divRT_symbolic = -a_1*t**(-2) + a_2*sp.log(t)*t**(-1) + a_3 + a_4*t / \
        2 + a_5*(t**2)/3 + a_6*(t**3)/4 + a_7*(t**4)/5 + b_1/t

    return cp_divR, h_divRT, so_divR, h_f, h_divRT_symbolic
